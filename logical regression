# -*- coding: utf-8 -*-
"""
Created on Sat May 26 10:46:30 2018
局部加权回归（非参数算法）：
logical regression
公式formila　∑　wi*(yi-theta.T*xi)**2
权重函数　wi=exp(-((xi-x)**2/(2*(tao**2)))　　tao是波长函数
如果(xi-x)**2很小，wi＝１
如果(xi-x)**2很大，wi＝０
此算法不适应大型的数据，因为每次拟合时，都要历完所有的数据。

@author: Administrator
"""

##################this is my first AI learn#######################
#-*- coding: utf-8 -*-
import matplotlib.pyplot as plt#显示２Ｄ画图
import os
import numpy as np
from numpy import poly1d
import math as ma
#coding: utf-8
add=("D://traningset//houses.txt")

def gaussian_kernel(x, x0, c, a=1.0):  
    """ 
    Gaussian kernel. 
 
    :Parameters: 
      - `x`: nearby datapoint we are looking at. 
      - `x0`: data point we are trying to estimate. 
      - `c`, `a`: kernel parameters. 
    """  
    # Euclidian distance  x=x[i] xi=x[i]=固定的　  
    diff = x - x0  
    dot_product = diff * diff.T  #diff的平方
    return a * np.exp(dot_product / (-2.0 * c**2))  #ＷＩ权重
  
  
def get_weights(training_inputs, datapoint, c):  
    """ 
    Function that calculates weight matrix for a given data point and training 
    data. 
 
    :Parameters: 
      - `training_inputs`: training data set the weights should be assigned to. 
      - `datapoint`: data point we are trying to predict. 
      - `c`: kernel function parameter 
 
    :Returns: 
      NxN weight matrix, there N is the size of the `training_inputs`. 
    """  
#    x = np.mat(training_inputs)  
    x = training_inputs   
    n_rows = x.shape[0]  
    # Create diagonal weight matrix from identity matrix  
    weights = np.mat(np.eye(n_rows))  #建立一个多少行的单位矩阵，初始化权重
    for i in range(n_rows):  
        weights[i, i] = gaussian_kernel(datapoint, x[i], c)  
  #矩阵的对角线上放权重
    return weights  
###########文本文件读取后，进行处理成我们想要的数据##################
def filepro(filename):
    """ 读取数据
        filename 文件名
      返回，Ｘ１,Ｘ２特征向量Ｘ,Ｙ为输出结果
        X 训练样本集矩阵
        y 标签集矩阵
    """
#open(filename).readline()=打开文件，整行的数据
#numfeat是3列数据中减去结果y那列得到的结果
#    lineArr = []
    numFeat = len(open(filename).readline().split('\t')) - 1
    X = []
    y = []
#    print(open(filename).readline() )
    file = open(filename)
    for line in file.readlines():#列出每一行
        lineArr = []#必须要重新来付值
        
        curLine = line.strip().split('\t')#去掉数据中　头和尾的空格
#        print(curLine)
        for i in range(numFeat):#
            lineArr.append(float(curLine[i]))#每个数组里面去掉最后一个
        
        X.append(lineArr)
        y.append(float(curLine[-1]))
#    print('x is value is:',np.mat(X))
#    print('y is value is:',np.mat(y).T)    
    return np.mat(X), np.mat(y).T
#把Ｘ转换成矩阵，把Ｙ转置，变成向量Ｙ

'''
fill_m是一个填空函数，主要对矩阵的左边进行填充，同时生成一个theta，这个矩阵
和Ｘ是一样的shape,大小　　Ｘ是需要处理的矩阵，ＣＯＬＳＨＵ是增加的列数
'''
def add_left_col(x,colshu):
    row,col=x.shape
    b=x
    col1=np.ones(row).reshape(-1,1)
    for i in range(colshu):
        b=np.column_stack((col1,b))
    col1=b    
    a,b=col1.shape
    theta=np.zeros(b).reshape(b,-1)
#    print(col1,theta)
    return col1,theta



#logical regression

def logical_regression(x,y,tao,theta,datapoint,rate):
    row,col=x.shape
    alldone=0
    maxLoop=row
#    maxLoop=1
    thetas={}
    errors=[]
    wi=get_weights(x,datapoint,tao)
#    theta=np.zeros(col).reshape(col,-1)
    x471=np.ones(row).reshape(row,-1)
#    print('x471',x471.shape)
    for j in range(col):
        thetas[j]=[theta[j,0]]
    while(maxLoop):
        maxLoop=maxLoop-1
        
        if(alldone):
            break
        for i in range(col):
            x1=x[:,i]#取Ｘ的3列中的一列
            y1=y#取Ｙ，Ｙ本来就是４８行２列中的一列
#            theta=theta#这个数是3行*一列
#            print('x1',x1.shape)
#            print('y1',y1.shape)
            print('wi',wi)
#            print('theta',theta.shape)
#            print('x',x.shape)
#            print('wi_col',wi[:,1])
            if(i==0):
                
                #此处需要研究
#                for j in range(row):
#                    wi_col=wi[:,j]
#                    #x1=47,1  y1=47,1  x=47,3  wicol=47,1   wi=47,47
                deriv =rate*(  (wi*(y1-x*theta)).T*x471/row)#对Ｊtheta求导数
#                    deriv=deriv/row
            else:
                
#                for j in range(row):
#                    wi_col=wi[:,j]
##                    deriv=(wi_col*((y1-x*theta).T*x471))/row#对Ｊtheta求导数
#                deriv=deriv+(wi_col*((y1-x*theta).T*x1))#对Ｊtheta求导数
                deriv =rate* ( (wi*(y1-x*theta)).T*x1/row)#对Ｊtheta求导数
#                    deriv=deriv/row
                
            print('this is deriv :',deriv)    
            theta[i,:]=theta[i,:]+deriv #把求得的theta值不断的更新
            thetas[i].append(theta[i,0])
#            print('x471',x471)    
#            print('this is thetas :',thetas)
        error=(y-x*theta).T*(y-x*theta)/(2*row)#这个ＯＫ,
        errors.append(error[0,0]/100000)#o
    return  theta, thetas,x




x,y=filepro(add)
x,theta=add_left_col(x,1)
#print(x,y)
#print(get_weights(x,x[0],1))
#print('x is shape',x.shape)
#print('y is shape',y.shape)
#print('theta is shape',theta.shape)
#print('theta is ',theta)
aaa=x.shape[0]
print(aaa)
for i in range(1):
    
    a,b,c=logical_regression(x,y,0.1,theta,x[25],0.000001)#logical_regression(x,y,tao,theta,,datapoint):
#    print('x[i] is :',x[i])
#    print('theta is :',a)

##
#print('theta:',a)
#print('thetas:',b)
#print('x:',c)


t1=a
print('theta is :',a)
###########################线性拟合图###################################
xx0=x[:,1].reshape(-1,1).T
xx1=x[:,2].reshape(-1,1).T
xx2=x[:,0].reshape(-1,1).T
row1,col1=x.shape
jtheta=[]
thetarow0=t1[0,:]
thetarow1=t1[1,:]
thetarow2=t1[2,:]
#print('44',thetarow1,thetarow2)
t1=x*t1
#xrow=x[i,:]#2*1
#print('rr',xrow[:,0])


for i in range(row1):
##    pass
    xrow=x[i,:]#2*1
##    print(xrow())
    jtheta.append((xrow[:,0]*thetarow1+xrow[:,1]*thetarow1+xrow[:,2]*thetarow2)[0,0])
#jtheta=t1
#print('jtheta',jtheta)
jtheta=np.array(jtheta).reshape(-1,1).T
#nn=np.zeros(47).reshape(-1,1).T
#nn=nn[0,23]+jtheta[0,23]
#jtheta=nn
#cc,dd=x.shape
#yyy=(x12*t1).reshape(-1,1)#yy=最终猜的价格
print('jtheta is:',jtheta)
print('xx0 .shape:',xx0.shape)
print('jtheta.shape',jtheta.shape)
#jtheta=jtheta

plt.scatter(xx0.tolist(),y.T.tolist(),marker="o",color='b',label='12',s=31) #Ｙ原始数据
plt.scatter(xx0.tolist(),jtheta.tolist(),marker="*",color='m',label='12',s=44) #Ｙ原始数据
plt.title('this is linear regeression dot pic')
plt.xlabel('house feature ')
plt.ylabel('house price')
plt.show()















