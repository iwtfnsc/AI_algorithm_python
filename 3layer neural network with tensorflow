# -*- coding: utf-8 -*-
"""
Created on Tue Sep 11 19:54:17 2018
神经网络三层
@author: Administrator
"""

import tensorflow as tf
import numpy as np
import matplotlib as pls
from tensorflow.examples.tutorials.mnist import input_data


#你可以把MNIST_data放在程序所在的文件夹里面，就会自己找到。
mnist=input_data.read_data_sets("MNIST_data",one_hot=True)

batch_size=100
#how much batch?一共有多少个一百张图片
nbatch = mnist.train.num_examples//batch_size
print('train集一共有',nbatch,'x100张图片')
print (" number of trian data is %d" % (mnist.train.num_examples))
print (" number of test data is %d" % (mnist.test.num_examples))
#print (" number of test data is %d", mnist.train.next_batch(1))
#tf.placeholder()相当于c/c++里面的定义的还未输入（赋值）的变量，
x=tf.placeholder(tf.float32,[None,784])
y=tf.placeholder(tf.float32,[None,10])
keepprob=tf.placeholder(tf.float32)
#创建权值和偏差  w 784,10这里的权值不是随机的，而是全设置为0，
w1=tf.Variable(tf.truncated_normal([784,200],stddev=0.1))
b1=tf.Variable(tf.zeros([200])+0.0001)
a1=tf.nn.relu(tf.matmul(x,w1)+b1)
a1_drop=tf.nn.dropout(a1,keepprob)

w2=tf.Variable(tf.truncated_normal([200,200],stddev=0.1))
b2=tf.Variable(tf.zeros([200])+0.0001)
a2=tf.nn.relu(tf.matmul(a1,w2)+b2)
a2_drop=tf.nn.dropout(a2,keepprob)

w3=tf.Variable(tf.truncated_normal([200,10],stddev=0.1))
b3=tf.Variable(tf.zeros([10])+0.0001)
a3=tf.nn.relu(tf.matmul(a2,w3)+b3)
a3_drop=tf.nn.dropout(a3,keepprob)
#代价cost funtion 计算真实值和激活函数之间的误差的平方的平均值。
#loss=tf.reduce_mean(tf.square(y-a1))
aa=tf.square(y-a3)
aaa=tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=a3)
loss=tf.reduce_mean(aaa)

#训练梯度下降　　梯度下降优化只需要写上rata就好了。
#表示使用GD来训练，其Learning rate为0.01，cost function为cross_entropy。
train_step=tf.train.GradientDescentOptimizer(0.2).minimize(loss)

#初始化所有变量的值
init=tf.global_variables_initializer()


#tf.argmax(a, b)可以返回矩阵a中，第b维中最大的数的index。
#然后再对比Ｙ,Ａ１ index中的最大值是否相等，如果相等＝Ture
correct_p = tf.equal(tf.argmax(y,1),tf.argmax(a3,1))

#tf.cast(x)是将Ｘ bool类形转成float32　也可以反转
#多少次正确率的值的reduce_mean平均值　
accuracy = tf.reduce_mean(tf.cast(correct_p,tf.float32))

with tf.Session() as sess:
    sess.run(init)
    for ii in range(5):
        for batch in range(nbatch):
# mnist.train.next_batch(100)从训练集里一次提取100张图片数据来训练。
            batch_x,batch_y = mnist.train.next_batch(batch_size)
#上面提取出来的Ｘ,Ｙ，喂数据　进行训练，
            sess.run(train_step,feed_dict={x:batch_x,y:batch_y})
#            print(sess.run(loss))
        acc=sess.run(accuracy,feed_dict={x:mnist.test.images,y:mnist.test.labels})
        print('第',str(ii+1),'次训练精度为：%',acc*100)        
#        print('batch_x',batch_x,'\n','\n','\n','batch_y',batch_y)     
#        print('batch_x',x,'\n','\n','\n','batch_y',y) 
